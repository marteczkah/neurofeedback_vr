# -*- coding: utf-8 -*-
"""classification_sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQpMrT9dVQzjsm54z8gyoFJTON336tYD
"""

# Based on the data preprocessign from: 
# https://mne.tools/stable/auto_examples/decoding/decoding_csp_eeg.html#sphx-glr-auto-examples-decoding-decoding-csp-eeg-py

!pip install mne

import numpy as np
import matplotlib.pyplot as plt

from sklearn.pipeline import Pipeline
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import ShuffleSplit, cross_val_score

from mne import Epochs, pick_types, events_from_annotations
from mne.channels import make_standard_montage
from mne.io import concatenate_raws, read_raw_edf
from mne.datasets import eegbci
from mne.decoding import CSP

tmin, tmax = -1., 4.
event_id = dict(hands=2, feet=3)
subject = 1
runs = [6, 10, 14]  # motor imagery: hands vs feet

raw_fnames = eegbci.load_data(subject, runs)
raw = concatenate_raws([read_raw_edf(f, preload=True) for f in raw_fnames])
eegbci.standardize(raw)  # set channel names
montage = make_standard_montage('standard_1005')
raw.set_montage(montage)

# Apply band-pass filter
raw.filter(7., 30., fir_design='firwin', skip_by_annotation='edge')

events, _ = events_from_annotations(raw, event_id=dict(T1=2, T2=3))

picks = pick_types(raw.info, meg=False, eeg=True, stim=False, eog=False,
                   exclude='bads')

# Read epochs (train will be done only between 1 and 2s)
# Testing will be done with a running classifier
epochs = Epochs(raw, events, event_id, tmin, tmax, proj=True, picks=picks,
                baseline=None, preload=True)
epochs_train = epochs.copy().crop(tmin=1., tmax=2.)
labels = epochs.events[:, -1] - 2
epochs_data = epochs.get_data()

class Classification:

    def __init__(self, num_classes):
        # the classifier elements: lda and csp
        self.csp = CSP(n_components=num_classes, reg=None, log=True, norm_trace=False)
        self.lda = LinearDiscriminantAnalysis()

    def train(self, X, y):
        transformed_data = self.csp.fit_transform(X, y)
        self.lda.fit(transformed_data, y)
    
    def predict(self, X):
        transformed_data = self.csp.transform(X)
        return self.lda.predict(transformed_data)
    
    def return_csp(self, X):
        return self.csp.transform(X)
    
    def plot_cps(self, epochs):
        self.csp.plot_patterns(epochs.info, ch_type="eeg", units="Patterns (AU)", size=1.5)

classifier = Classification(4)

classifier.train(epochs_data, labels)

preds = classifier.predict(epochs_data)

classifier.plot_cps(epochs)

# calculate accuracy
from sklearn.metrics import accuracy_score

accuracy_score(labels, preds)